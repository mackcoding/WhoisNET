name: Build and Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

permissions:
  contents: write
  issues: write

jobs:
  build-whoisnet:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0'
    - name: Restore Dependencies
      run: dotnet restore src/WhoisNET/WhoisNET.sln
    - name: Run WhoisNET Tests
      run: dotnet test src/WhoisNET.Tests/WhoisNET.Tests.csproj --verbosity normal
    - name: Build WhoisNET
      run: dotnet build src/WhoisNET/WhoisNET.sln --configuration Release
    - name: Package WhoisNET (Linux)
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        dotnet publish src/WhoisNET/WhoisNET.csproj -c Release -o WhoisNET
        zip -r WhoisNET-linux-${{ github.ref_name }}.zip WhoisNET
      shell: bash
    - name: Package WhoisNET (Windows)
      if: ${{ matrix.os == 'windows-latest' }}
      run: |
        dotnet publish src/WhoisNET/WhoisNET.csproj -c Release -o WhoisNET
        Compress-Archive -Path WhoisNET/* -DestinationPath WhoisNET-win-${{ github.ref_name }}.zip
      shell: pwsh
    - name: Upload WhoisNET Artifact
      uses: actions/upload-artifact@v4
      with:
        name: whois-${{ matrix.os == 'ubuntu-latest' && 'linux' || 'win' }}-${{ github.run_id }}
        path: WhoisNET-${{ matrix.os == 'ubuntu-latest' && 'linux' || 'win' }}-${{ github.ref_name }}.zip

  build-whoisnet-client:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0'
    - name: Restore Dependencies
      run: dotnet restore src/WhoisNET.Client/WhoisNET.Client.csproj
    - name: Run WhoisNET.Client Tests
      run: dotnet test src/WhoisNET.Client.Tests/WhoisNET.Client.Tests.csproj --verbosity normal
    - name: Build WhoisNET.Client
      run: dotnet build src/WhoisNET.Client/WhoisNET.Client.csproj --configuration Release
    - name: Package WhoisNET.Client (Linux)
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        dotnet publish src/WhoisNET.Client/WhoisNET.Client.csproj -c Release -o WhoisNET.Client
        zip -r WhoisNET.Client-linux-${{ github.ref_name }}.zip WhoisNET.Client
      shell: bash
    - name: Package WhoisNET.Client (Windows)
      if: ${{ matrix.os == 'windows-latest' }}
      run: |
        dotnet publish src/WhoisNET.Client/WhoisNET.Client.csproj -c Release -o WhoisNET.Client
        Compress-Archive -Path WhoisNET.Client/* -DestinationPath WhoisNET.Client-win-${{ github.ref_name }}.zip
      shell: pwsh
    - name: Upload WhoisNET.Client Artifact
      uses: actions/upload-artifact@v4
      with:
        name: whois-client-${{ matrix.os == 'ubuntu-latest' && 'linux' || 'win' }}-${{ github.run_id }}
        path: WhoisNET.Client-${{ matrix.os == 'ubuntu-latest' && 'linux' || 'win' }}-${{ github.ref_name }}.zip

  release:
    runs-on: ubuntu-latest
    needs: [build-whoisnet, build-whoisnet-client]
    steps:
    - uses: actions/checkout@v4
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_SECRET }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
    - name: Upload WhoisNET Release Asset (Linux)
      if: ${{ matrix.os == 'ubuntu-latest' }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_SECRET }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: WhoisNET-linux-${{ github.ref_name }}.zip
        asset_name: whois-linux-${{ github.ref_name }}.zip
        asset_content_type: application/zip
    - name: Upload WhoisNET Release Asset (Windows)
      if: ${{ matrix.os == 'windows-latest' }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_SECRET }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: WhoisNET-win-${{ github.ref_name }}.zip
        asset_name: whois-win-${{ github.ref_name }}.zip
        asset_content_type: application/zip
    - name: Upload WhoisNET.Client Release Asset (Linux)
      if: ${{ matrix.os == 'ubuntu-latest' }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_SECRET }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: WhoisNET.Client-linux-${{ github.ref_name }}.zip
        asset_name: whois-client-linux-${{ github.ref_name }}.zip
        asset_content_type: application/zip
    - name: Upload WhoisNET.Client Release Asset (Windows)
      if: ${{ matrix.os == 'windows-latest' }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_SECRET }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: WhoisNET.Client-win-${{ github.ref_name }}.zip
        asset_name: whois-client-win-${{ github.ref_name }}.zip
        asset_content_type: application/zip
