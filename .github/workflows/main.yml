name: Build and Release

on:
  push:
    branches:
      - main
      
permissions:
  contents: write
  issues: write

jobs:
  build-whoisnet:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
    - uses: actions/checkout@v4
    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0'
    - name: Restore Dependencies
      run: dotnet restore src/WhoisNET/WhoisNET.sln
    - name: Run WhoisNET Tests
      run: dotnet test src/WhoisNET.Tests/WhoisNET.Tests.csproj --verbosity normal
    - name: Build WhoisNET
      run: dotnet build src/WhoisNET/WhoisNET.sln --configuration Release
    - name: Package WhoisNET
      run: |
        mkdir -p output
        dotnet publish src/WhoisNET/WhoisNET.csproj -c Release -o output/WhoisNET
        if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          zip -r output/WhoisNET-linux.zip output/WhoisNET
        else
          Compress-Archive -Path output/WhoisNET/* -DestinationPath output/WhoisNET-win.zip
        fi
      shell: bash
    - name: Upload WhoisNET Artifact
      uses: actions/upload-artifact@v4
      with:
        name: whois-${{ matrix.os == 'ubuntu-latest' && 'linux' || 'win' }}-${{ github.run_id }}
        path: output/WhoisNET-${{ matrix.os == 'ubuntu-latest' && 'linux' || 'win' }}.zip

  build-whoisnet-client:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
    - uses: actions/checkout@v4
    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0'
    - name: Restore Dependencies
      run: dotnet restore src/WhoisNET.Client/WhoisNET.Client.csproj
    - name: Run WhoisNET.Client Tests
      run: dotnet test src/WhoisNET.Client.Tests/WhoisNET.Client.Tests.csproj --verbosity normal
    - name: Build WhoisNET.Client
      run: dotnet build src/WhoisNET.Client/WhoisNET.Client.csproj --configuration Release
    - name: Package WhoisNET.Client
      run: |
        mkdir -p output
        dotnet publish src/WhoisNET.Client/WhoisNET.Client.csproj -c Release -o output/WhoisNET.Client
        if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          zip -r output/WhoisNET.Client-linux.zip output/WhoisNET.Client
        else
          Compress-Archive -Path output/WhoisNET.Client/* -DestinationPath output/WhoisNET.Client-win.zip
        fi
      shell: bash
    - name: Upload WhoisNET.Client Artifact
      uses: actions/upload-artifact@v4
      with:
        name: whois-client-${{ matrix.os == 'ubuntu-latest' && 'linux' || 'win' }}-${{ github.run_id }}
        path: output/WhoisNET.Client-${{ matrix.os == 'ubuntu-latest' && 'linux' || 'win' }}.zip

  release:
    runs-on: ubuntu-latest
    needs: [build-whoisnet, build-whoisnet-client]
    steps:
    - uses: actions/checkout@v4
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v1.0.0
        release_name: Release v1.0.0
        draft: false
        prerelease: false
    - name: Upload WhoisNET Release Asset (Linux)
      if: ${{ matrix.os == 'ubuntu-latest' }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: output/WhoisNET-linux.zip
        asset_name: whois-linux-${{ github.run_id }}.zip
        asset_content_type: application/zip
    - name: Upload WhoisNET Release Asset (Windows)
      if: ${{ matrix.os == 'windows-latest' }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: output/WhoisNET-win.zip
        asset_name: whois-win-${{ github.run_id }}.zip
        asset_content_type: application/zip
    - name: Upload WhoisNET.Client Release Asset (Linux)
      if: ${{ matrix.os == 'ubuntu-latest' }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: output/WhoisNET.Client-linux.zip
        asset_name: whois-client-linux-${{ github.run_id }}.zip
        asset_content_type: application/zip
    - name: Upload WhoisNET.Client Release Asset (Windows)
      if: ${{ matrix.os == 'windows-latest' }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: output/WhoisNET.Client-win.zip
        asset_name: whois-client-win-${{ github.run_id }}.zip
        asset_content_type: application/zip
