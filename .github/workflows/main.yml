name: Build and Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  issues: write

jobs:
  build-whoisnet:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
    - uses: actions/checkout@latest
    - name: Set up Node.js
      uses: actions/setup-node@latest
      with:
        node-version: '20'
    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0'
    - name: Restore Dependencies
      run: dotnet restore src/WhoisNET/WhoisNET.sln
    - name: Run WhoisNET Tests
      run: dotnet test src/WhoisNET.Tests/WhoisNET.Tests.csproj --verbosity normal
    - name: Build WhoisNET
      run: dotnet build src/WhoisNET/WhoisNET.sln --configuration Release
    - name: Package WhoisNET (Linux)
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        dotnet publish src/WhoisNET/WhoisNET.csproj -c Release -o WhoisNET
        cd WhoisNET
        zip -r ../WhoisNET-linux-${{ github.ref_name }}.zip .
      shell: bash
    - name: Package WhoisNET (Windows)
      if: ${{ matrix.os == 'windows-latest' }}
      run: |
        dotnet publish src/WhoisNET/WhoisNET.csproj -c Release -o WhoisNET
        Compress-Archive -Path WhoisNET/* -DestinationPath WhoisNET-win-${{ github.ref_name }}.zip
      shell: pwsh
    - name: Upload WhoisNET Artifact
      uses: actions/upload-artifact@latest
      with:
        name: WhoisNET-${{ matrix.os == 'ubuntu-latest' && 'linux' || 'win' }}-${{ github.ref_name }}
        path: WhoisNET-${{ matrix.os == 'ubuntu-latest' && 'linux' || 'win' }}-${{ github.ref_name }}.zip

  build-whoisnet-client:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
    - uses: actions/checkout@latest
    - name: Set up Node.js
      uses: actions/setup-node@latest
      with:
        node-version: '20'
    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0'
    - name: Restore Dependencies
      run: dotnet restore src/WhoisNET.Client/WhoisNET.Client.csproj
    - name: Run WhoisNET.Client Tests
      run: dotnet test src/WhoisNET.Client.Tests/WhoisNET.Client.Tests.csproj --verbosity normal
    - name: Build WhoisNET.Client
      run: dotnet build src/WhoisNET.Client/WhoisNET.Client.csproj --configuration Release
    - name: Package WhoisNET.Client (Linux)
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        dotnet publish src/WhoisNET.Client/WhoisNET.Client.csproj -c Release -o WhoisNET.Client
        cd WhoisNET.Client
        zip -r ../WhoisNET.Client-linux-${{ github.ref_name }}.zip .
      shell: bash
    - name: Package WhoisNET.Client (Windows)
      if: ${{ matrix.os == 'windows-latest' }}
      run: |
        dotnet publish src/WhoisNET.Client/WhoisNET.Client.csproj -c Release -o WhoisNET.Client
        Compress-Archive -Path WhoisNET.Client/* -DestinationPath WhoisNET.Client-win-${{ github.ref_name }}.zip
      shell: pwsh
    - name: Upload WhoisNET.Client Artifact
      uses: actions/upload-artifact@latest
      with:
        name: WhoisNET.Client-${{ matrix.os == 'ubuntu-latest' && 'linux' || 'win' }}-${{ github.ref_name }}
        path: WhoisNET.Client-${{ matrix.os == 'ubuntu-latest' && 'linux' || 'win' }}-${{ github.ref_name }}.zip

  release:
    runs-on: ubuntu-latest
    needs: [build-whoisnet, build-whoisnet-client]
    steps:
    - uses: actions/checkout@latest
    - name: Create GitHub Release
      uses: elgohr/Github-Release-Action@v5
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag: ${{ github.ref_name }}
        title: Release ${{ github.ref_name }}
        files: |
          WhoisNET-linux-${{ github.ref_name }}.zip
          WhoisNET-win-${{ github.ref_name }}.zip
          WhoisNET.Client-linux-${{ github.ref_name }}.zip
          WhoisNET.Client-win-${{ github.ref_name }}.zip
